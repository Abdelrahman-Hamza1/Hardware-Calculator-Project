;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Thu Feb 1 2024
; Processor: PIC16F877A
; Compiler:  MPASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p16f877a.inc                ; Include register definition file

;====================================================================
; VARIABLES
;====================================================================
HundredsOne EQU 0X20 
DigitsOne EQU 0X60
HundredsTwo EQU 0x40 
DigitsTwo EQU 0x50

FLAGS EQU 0X32 
TimerCounter EQU 0x30 

NumHolder EQU 0x70
;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
RST   code  0x0 
      goto  Start
     
ISR   code 0x04
      NOP 

      BANKSEL PIR1
      BTFSC PIR1, 0 
      GOTO TimerInterrupt 
   
      BANKSEL PORTD
     MOVF FLAGS, W     
     XORLW 0x00       
     BTFSS STATUS, Z  
     GOTO Test1
     INCF HundredsOne,F 
     MOVF HundredsOne, W 
     MOVWF PORTD
     XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF HundredsOne
     MOVF HundredsOne, W
     MOVWF PORTD 
     GOTO ifDone
    
    ; Check if REG == 1
Test1     
     MOVF FLAGS, W 
     XORLW 0x01       
     BTFSS STATUS, Z  
     GOTO Test2
     INCF DigitsOne,F 
     MOVF DigitsOne, W 
     MOVWF PORTD
     XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF DigitsOne
     MOVF DigitsOne, W
     MOVWF PORTD 
     GOTO ifDone
    
    ; Check if REG == 2
Test2
    MOVF FLAGS, W  
     XORLW 0x02
     BTFSS STATUS, Z 
     GOTO Test3
     INCF HundredsTwo,F 
     MOVF HundredsTwo, W 
     MOVWF PORTD
     XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF HundredsTwo
     MOVF HundredsTwo, W
     MOVWF PORTD  
     GOTO ifDone
    
    ; Check if REG == 3
Test3
    MOVF FLAGS, W 
     XORLW 0x03       
     BTFSS STATUS, Z  
     GOTO ifDone
     INCF DigitsTwo,F    
     MOVF DigitsTwo, W 
     MOVWF PORTD 
      XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF DigitsTwo
     MOVF DigitsTwo, W
     MOVWF PORTD 
     
ifDone
      CLRF TimerCounter
      BCF INTCON, 1 ; Clear the flag interrupt bit
      GOTO endInt
      
TimerInterrupt 
      BANKSEL PIR1
      BCF PIR1, 0 

      INCF TimerCounter, F ; inc and get 
      MOVF TimerCounter, W
      
     
      XORLW 0x04       
      BTFSS STATUS, Z  
      GOTO endInt
      NOP
      BANKSEL PORTD
      INCF FLAGS, F
      MOVF FLAGS, W 
      MOVWF PORTD 
      
      ;INCF PORTD, F
     
      CLRF TimerCounter

      
         
endInt
      NOP
      BANKSEL TMR1H
      CLRF TMR1H 
      CLRF TMR1L
      BANKSEL PORTB
      movf PORTB, F	; Read PortB (to itself) to end mismatch condition
      RETFIE     

;====================================================================
; CODE SEGMENT
;====================================================================

PGM   code
Start
      NOP
      ;; Initializations Here!
      BANKSEL TRISD 
      CLRF TRISD 
      
      BANKSEL TRISC 
      CLRF TRISC 
      
      BANKSEL TRISB 
      BSF TRISB, 0
      
      ; Enable Interrupts!
      BSF INTCON, GIE 
      BSF INTCON, PEIE 
      BSF INTCON, INTE
      
      BANKSEL T1CON
      BSF T1CON, T1CKPS1
      BSF T1CON, T1CKPS0  ; 1:8 prescaler -> 0.5 sec
      
      
      BANKSEL PIE1
      BSF PIE1, TMR1IE 
      
      BANKSEL PORTD
      MOVLW 0x00
      MOVWF PORTD
      
      
      ; Code Here!
      
      ;;; LCD TASK FIRST -----> Could Disable Push Button Interrupts While Doing this to avoid the clicks actually doing anything
      ;;;;;;;;;;;;;;;;;;;;;;;;; But even if the user clicks the button while the LCD is printing, it will only afffect the First Numbers' Hundreds Digit
      ;;;;;;;;;;;;;;;;;;;;;;;;  And would not move to other digits because timer is still off.
      
      BANKSEL T1CON
      BSF T1CON, TMR1ON ; Get Timer Started!
      
      BANKSEL PORTD
      
Loop 
      BTFSC FLAGS, 1 ; Bit 1 is set = FLAGS = 2/3 -> Break Out  b'0000_0010
      GOTO Number2
      GOTO Loop
      
      
Number2      
      NOP 
      BANKSEL T1CON
      BCF T1CON, TMR1ON ;; Disable timer & do LCD Work
      
      ;;;;;;;;;;;;;;;;;;;;;;;;
      ;; LCD Work.
      ;;;;;;;;;;;;;;;;;;;;;;;;
        
      ;; After finishing LCD Work, Re-enable Timer & Reset it and go again
      NOP
      BANKSEL T1CON
      BSF T1CON, TMR1ON
      BANKSEL TMR1H
      CLRF TMR1H 
      CLRF TMR1L
     
      BANKSEL PORTD
Loop2  
      BTFSC FLAGS, 2 ; Bit 3 is set = FLAGS = 4 or higher -> Break Out  
      GOTO Communication
      GOTO Loop2

Communication
      NOP 
      BANKSEL T1CON
      BCF T1CON, TMR1ON
      
      ;;; LCD Work Here : Print "="
      
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;; START Sending DATA to co-processor ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;; Multiply HundredsOne by 10 & Add DigitsOne to it , that will be our first number;;;;;;;
      ;;;; We will send it and make sure that our MSB is set to 1 (0-99 Number can be reperesnted in 7 Bits thus the MSB is free-use)
      ;;;; We will give a small delay for the co-proccessor to read the value then we will send the DigitsTwo Number Through (MSB = 1 Aswell)
      ;;;; Then Do a quick multiplication & then switch PORTC to OUTPUTS VIA TRISC & LISTEN UNTIL THE BUS CHANGES. 
      ;;;; Add Both Results then Send to LCD.	
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 00-99 -> 7 bits --- PORTC 8 bits -> PC7 will be used for Synchronization
      
      CLRW 
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      ADDWF HundredsOne, W
      
      ADDWF DigitsOne, W ;; Number One now in W
      
      MOVWF PORTD
      
      MOVWF PORTC 
      BSF PORTC, 7  ;; Set Last Bit to Notify co-processor ab number rcved
      
      NOP
      NOP
      NOP
      NOP
      
      MOVF  DigitsTwo, W ;; send unit of number #2
      MOVWF PORTC 
      BCF PORTC, 7 
      
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP 		;;; Wait a bit then switch to input & wait for response
      
      BANKSEL TRISC
      MOVLW 0XFF
      MOVWF TRISC   ;; CHANGE PORT C TO INPUT!
      
      BANKSEL PORTC
LoopRCV  
      BTFSC PORTC, 7 ;; IF BIT 7 IS ON -> NUMBER IS RCVD 
      GOTO RCVD
      goto  LoopRCV      

RCVD
      MOVF PORTC, W 
      MOVWF PORTD
      BCF PORTD, 7
      GOTO endLoop
      ;; next 2 lines will be skipped for now.
      BANKSEL PORTD
      MOVF DigitsTwo,W
endLoop      
       GOTO endLoop
;====================================================================
      END
