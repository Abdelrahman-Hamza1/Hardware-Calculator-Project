;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Thu Feb 1 2024
; Processor: PIC16F877A
; Compiler:  MPASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p16f877a.inc                ; Include register definition file

;====================================================================
; VARIABLES
;====================================================================
TensOne EQU 0X20 
DigitsOne EQU 0X60
TensTwo EQU 0x40 
DigitsTwo EQU 0x50

NumberOne EQU 0x22
NumberTwo EQU 0x23

FLAGS EQU 0X32 ;; FLAGS == 0 -> TensOne, FLAGS == 1 DigitsOne (0-3)
TimerCounter EQU 0x30  			;; 2 sec -> Timer1 (0.5s) =. Count 4 times => Increment FLAGS

RCV1 EQU 0x33
RCV2 EQU 0X34

Lsd EQU 0X35
Msd EQU  0x36

Ones EQU 0x70
Tens EQU 0x71
Hunds EQU 0x72
Thous EQU 0x73

Temp EQU 0x74
Result EQU 0x75
NumHolder EQU 0x76
;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
RST   code  0x0 
      goto  Start
     
ISR   code 0x04
      NOP 

      BANKSEL PIR1
      BTFSC PIR1, 0 
      GOTO TimerInterrupt 
   
      BANKSEL PORTD
     MOVF FLAGS, W     
     XORLW 0x00       
     BTFSS STATUS, Z  
     GOTO Test1
     INCF TensOne,F 
     MOVF TensOne, W 
     MOVWF PORTD
     XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF TensOne
     MOVF TensOne, W
     MOVWF PORTD 
     GOTO ifDone
    
    ; Check if REG == 1
Test1     
     MOVF FLAGS, W 
     XORLW 0x01       
     BTFSS STATUS, Z  
     GOTO Test2
     INCF DigitsOne,F 
     MOVF DigitsOne, W 
     MOVWF PORTD
     XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF DigitsOne
     MOVF DigitsOne, W
     MOVWF PORTD 
     GOTO ifDone
    
    ; Check if REG == 2
Test2
    MOVF FLAGS, W  
     XORLW 0x02
     BTFSS STATUS, Z 
     GOTO Test3
     INCF TensTwo,F 
     MOVF TensTwo, W 
     MOVWF PORTD
     XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF TensTwo
     MOVF TensTwo, W
     MOVWF PORTD  
     GOTO ifDone
    
    ; Check if REG == 3
Test3
    MOVF FLAGS, W 
     XORLW 0x03       
     BTFSS STATUS, Z  
     GOTO ifDone
     INCF DigitsTwo,F    
     MOVF DigitsTwo, W 
     MOVWF PORTD 
      XORLW 0x0A ;; CHECK IF EQUAL TO 10 -> CHANGE TO 0 
     BTFSS STATUS, Z
     GOTO ifDone
     CLRF DigitsTwo
     MOVF DigitsTwo, W
     MOVWF PORTD 
     
ifDone
      CLRF TimerCounter
      BCF INTCON, 1 ; Clear the flag interrupt bit
      GOTO endInt
      
TimerInterrupt 
      BANKSEL PIR1
      BCF PIR1, 0 

      INCF TimerCounter, F ; inc and get 
      MOVF TimerCounter, W
      
     
      XORLW 0x04       
      BTFSS STATUS, Z  
      GOTO endInt
      NOP
      BANKSEL PORTD
      INCF FLAGS, F
      MOVF FLAGS, W 
      MOVWF PORTD 
      
      ;INCF PORTD, F
     
      CLRF TimerCounter

      
         
endInt
      NOP
      BANKSEL TMR1H
      CLRF TMR1H 
      CLRF TMR1L
      BANKSEL PORTB
      movf PORTB, F	; Read PortB (to itself) to end mismatch condition
      RETFIE     

;====================================================================
; CODE SEGMENT
;====================================================================

PGM   code
Start
      NOP
      ;; Initializations Here!
      BANKSEL TRISD 
      CLRF TRISD 
      
      BANKSEL TRISC 
      CLRF TRISC 
      
      BANKSEL TRISB 
      BSF TRISB, 0
      
      ; Enable Interrupts!
      BSF INTCON, GIE 
      BSF INTCON, PEIE 
      BSF INTCON, INTE
      
      BANKSEL T1CON
      BSF T1CON, T1CKPS1
      BSF T1CON, T1CKPS0  ; 1:8 prescaler -> 0.5 sec
      
      
      BANKSEL PIE1
      BSF PIE1, TMR1IE 
      
      BANKSEL PORTD
      MOVLW 0x00
      MOVWF PORTD
      CLRF Thous
      CLRF Hunds
      CLRF Tens
      CLRF Ones
      
      
      ; Code Here!
      
      ;;; LCD TASK FIRST -----> Could Disable Push Button Interrupts While Doing this to avoid the clicks actually doing anything
      ;;;;;;;;;;;;;;;;;;;;;;;;; But even if the user clicks the button while the LCD is printing, it will only afffect the First Numbers' Hundreds Digit
      ;;;;;;;;;;;;;;;;;;;;;;;;  And would not move to other digits because timer is still off.
      
      BANKSEL T1CON
      BSF T1CON, TMR1ON ; Get Timer Started!
      
      BANKSEL PORTD
      
Loop 
      BTFSC FLAGS, 1 ; Bit 1 is set = FLAGS = 2/3 -> Break Out  b'0000_0010
      GOTO Number2
      GOTO Loop
      
      
Number2      
      NOP 
      BANKSEL T1CON
      BCF T1CON, TMR1ON ;; Disable timer & do LCD Work
      
      ;;;;;;;;;;;;;;;;;;;;;;;;
      ;; LCD Work.
      ;;;;;;;;;;;;;;;;;;;;;;;;
        
      ;; After finishing LCD Work, Re-enable Timer & Reset it and go again
      NOP
      BANKSEL T1CON
      BSF T1CON, TMR1ON
      BANKSEL TMR1H
      CLRF TMR1H 
      CLRF TMR1L
     
      BANKSEL PORTD
Loop2  
      BTFSC FLAGS, 2 ; Bit 3 is set = FLAGS = 4 or higher -> Break Out  flags == 0b0000_0100 (4)
      GOTO Communication
      GOTO Loop2

Communication
      NOP 
      BANKSEL T1CON
      BCF T1CON, TMR1ON
      
      ;;; LCD Work Here : Print "="
      
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;; START Sending DATA to co-processor ;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;; Multiply TensOne by 10 & Add DigitsOne to it , that will be our first number;;;;;;;
      ;;;; We will send it and make sure that our MSB is set to 1 (0-99 Number can be reperesnted in 7 Bits thus the MSB is free-use)
      ;;;; We will give a small delay for the co-proccessor to read the value then we will send the DigitsTwo Number Through (MSB = 1 Aswell)
      ;;;; Then Do a quick multiplication & then switch PORTC to OUTPUTS VIA TRISC & LISTEN UNTIL THE BUS CHANGES. 
      ;;;; Add Both Results then Send to LCD.	
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 00-99 -> 7 bits --- PORTC 8 bits -> PC7 will be used for Synchronization
      
      CLRW 
      ADDWF TensOne, W
      ADDWF TensOne, W
      ADDWF TensOne, W
      ADDWF TensOne, W
      ADDWF TensOne, W
      
      ADDWF TensOne, W
      ADDWF TensOne, W
      ADDWF TensOne, W
      ADDWF TensOne, W
      ADDWF TensOne, W
      
      ADDWF DigitsOne, W ;; NumberOne now in W  2 , 7  => 2*10 + 7 = 27
      
      MOVWF PORTD
      
      MOVWF NumberOne
      MOVWF PORTC 
      BSF PORTC, 7  ;; Set Last Bit to Notify co-processor ab number rcved ||| 0-99 (7bits) 8th bit => 
      
      NOP
      NOP
      NOP
      NOP
      
      MOVF  DigitsTwo, W ;; send unit of number #2 17 * 18 -> 17 , 8 = 17*8 , 17*10 ++++
      MOVWF PORTC 
      BCF PORTC, 7 
      
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP 		;;; Wait a bit then switch to input & wait for response
      
      BANKSEL TRISC
      MOVLW 0XFF
      MOVWF TRISC   ;; CHANGE PORT C TO INPUT!
      
      BANKSEL PORTC
LoopRCV  
      BTFSC PORTC, 7 ;; IF BIT 7 IS ON -> NUMBER IS RCVD 
      GOTO RCVD
      goto  LoopRCV      

RCVD
      MOVF PORTC, W       
      MOVWF RCV1
      BCF RCV1, 7
            
  
LoopRCV2
      BTFSS PORTC, 7
      GOTO RCVD2
      goto  LoopRCV2      

RCVD2
      MOVF PORTC, W       
      MOVWF RCV2
      
      
      
      ;;;; Communications Done. 
      ;;; NumHolder has Number1 , RCV1 (37) Has 2 MSD from co-pr RCV2 (5)has 1 LSD from co-pr  => We can extract 3 7 5 each into a register 
      ;;; NumHolder * 10*TensTwo => Thous Hunds Tens Ones
      
      CLRW 
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      ADDWF TensTwo, W
      
      MOVWF NumberTwo
      
      
      
L1
      MOVF Result, W
      ADDWF NumberOne, W 
      BTFSS STATUS, C
      GOTO DontIncrement
      INCF Hunds 
      INCF Hunds
      
      INCF Tens
      INCF Tens
      INCF Tens
      INCF Tens
      INCF Tens
      
      INCF Ones
      INCF Ones
      INCF Ones
      INCF Ones 
      INCF Ones
      INCF Ones
DontIncrement

      MOVWF Result ;;; store current multiplication result
      DECF NumberTwo, F
      MOVF NumberTwo, W
      XORLW 0x00
      BTFSC STATUS, Z
      GOTO EndMul
      GOTO L1
      
EndMul      
      MOVF Result, W
      MOVWF PORTD
      
; Calclulate hundreds......................................

		BSF		STATUS,C	; set carry for subtract
		MOVLW	D'100'		; load 100
sub1		SUBWF	Result,1		; and subtract from result
		INCF	Hunds		; count number of loops
		BTFSC	STATUS,C	; and check if done
		GOTO	sub1		; no, carry on

		ADDWF	Result,1		; yes, add 100 back on
		DECF	Hunds		; and correct loop count

; Calculate tens digit.....................................

		BSF		STATUS,C	; repeat process for tens
		MOVLW	D'10'		; load 10
sub2		SUBWF	Result		; and subtract from result
		INCF	Tens		; count number of loops
		BTFSC	STATUS,C	; and check if done
		GOTO	sub2		; no, carry on

		ADDWF	Result		; yes, add 100 back on
		DECF	Tens		; and correct loop count
		MOVF	Result,W		; load remainder
		ADDWF	Ones,F		; and store as ones digit

		
		
;;;;;;;;;;;;;;; NEXT USE RCV1, RCV2



	MOVF	RCV1,W	
	MOVWF	Lsd		; into low digit store
	CLRF	Msd		; high digit = 0
	BSF	STATUS,C	; set C flag
	MOVLW	D'10'		; load 10

again	SUBWF	Lsd		; sub 10 from result
	INCF	Msd		; inc high digit
	BTFSC	STATUS,C	; check if negative
	GOTO	again		; no, keep going
	ADDWF	Lsd		; yes, add 10 back 
	DECF	Msd		; inc high digit
	
	MOVF Msd, W
	ADDWF Hunds, F
	MOVF Lsd, W
	ADDWF Tens, F
	MOVF RCV2, W
	ADDWF Ones, F
	
OnesLoop
    MOVLW   D'10'       
    SUBWF   Ones,F     ; Subtract 10 from Ones
    BTFSS   STATUS, C   ; If carry is SET => Ones is 0-9 => GOTO (Re-Add 10 & Exit)
    GOTO    OnesLoop_Exit   
    INCF    Tens
    GOTO    OnesLoop    ; Go to Tens loop
OnesLoop_Exit
    MOVLW D'10'
    ADDWF Ones, F

TensLoop
	
    MOVLW   D'10'     
    SUBWF   Tens, F    
    BTFSS   STATUS, C  
    GOTO    TensLoop_Exit
    INCF Hunds 
    GOTO    TensLoop  
TensLoop_Exit
    MOVLW D'10'
    ADDWF Tens, F
    
HundsLoop
    MOVLW   D'10'     
    SUBWF   Hunds, F    
    BTFSS   STATUS, C  
    GOTO    HundsLoop_Exit
    INCF 	Thous 
    GOTO    HundsLoop  
HundsLoop_Exit
    MOVLW D'10'
    ADDWF Hunds, F    
      

      MOVF Ones, W
      MOVWF PORTD
      
endLoop      
       GOTO endLoop
;====================================================================
      END
