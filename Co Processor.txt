;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Wed Feb 7 2024
; Processor: PIC16F877A
; Compiler:  MPASM (Proteus)
;====================================================================

;====================================================================
; DEFINITIONS
;====================================================================

#include p16f877a.inc                ; Include register definition file

;====================================================================
; VARIABLES
;====================================================================
NumberOne EQU 0x20
NumberTwo EQU 0x30
Result_High EQU 0x40
Result_Low EQU 0x50
Temp EQU 0x60
Hunds EQU 0x70
Tens EQU 0x71
Ones EQU 0x72
;====================================================================
; RESET and INTERRUPT VECTORS
;====================================================================

      ; Reset Vector
RST   code  0x0 
      goto  Start

;====================================================================
; CODE SEGMENT
;====================================================================

PGM   code
Start
      NOP 
      BANKSEL TRISC 
      MOVLW 0XFF
      MOVWF TRISC
      ;; PORT C IS INPUT (SERIAL COMMUNICATION)
      ;; PORT D IS OUTPUTS(LEDS)
      BANKSEL TRISD
      CLRF TRISD 
      
      BANKSEL TRISB
      CLRF TRISB
      
      BANKSEL PORTD
      CLRF PORTD
      CLRF PORTB
      CLRF Hunds
      CLRF Tens
      CLRF Ones
     
      ; Write your code here

Loop  
      NOP
      BTFSC PORTC, 7 
      GOTO finishNumberOne
      goto  Loop
 
finishNumberOne      
      MOVF PORTC, W
      MOVWF NumberOne
      BCF NumberOne, 7
      
NumTwoLoop
      BTFSS PORTC, 7
      GOTO Done
      GOTO NumTwoLoop
      
Done      
      MOVF PORTC, W 
      MOVWF NumberTwo
      
      ;; Small Delay (Could Be Replaced by a delay function)
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP	
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      NOP
      
      BANKSEL TRISC 
      CLRF TRISC  	; Reverse Direction of Port Cs  
      CLRF PORTC
     
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Work On Multiplication Here (Change From Addition To Mul) ;;;;;;;;;;;;;;;;
      BANKSEL PORTA
      CLRF Temp
      CLRF Result_High
      CLRF Result_Low

L1
      MOVF Temp, W
      ADDWF NumberTwo, W 	  ;; 255 + 5 -> CARRY = 1!!!!
      BTFSC STATUS, C  		 ;; if carry clear -> skip incrementing the HIGH register
      INCF Result_High, F
      DECF NumberOne, F 	; Decrement the first number (Loop variable)
      
      MOVWF Temp	; Store Temp back for now  (Old temp + NumberTwo)
   
      MOVF NumberOne, W
      XORLW 0x00       
      BTFSC STATUS, Z 
      GOTO EndMul
      GOTO L1
      
EndMul
      MOVF Temp, W
      MOVWF Result_Low
      
      
      MOVF Result_High,W ;; 0000_00_0(PB1)_1(PB0)
      MOVWF PORTB
      
      MOVF Result_Low, W
      MOVWF PORTD
      
      ;;;;;;;;; Next -> Transform Result_High & Result_Low to Hundreds, Tens & Digits Count. ca
      ;;;;;;;;; Code to transform 1 register to Hundreds, Tens & Digits already Exists in VINTEST project provided by Dr. Hanna
      ;;;;;;;; We only need to transform the Result_High & Could use Dr. Hanna's code to transform Result_Low
      
      MOVF Result_High, W     
      XORLW 0x00       
      BTFSS STATUS, Z  
      GOTO Test1
      GOTO ifDone ;;; Is result High is ZERO -> Do nothing and go to ifDone (No Increments or anything)
     
    ; Check if REG == 1
Test1     
      MOVF Result_High, W 
      XORLW 0x01       
      BTFSS STATUS, Z  
      GOTO Test2
      MOVLW d'2'
      MOVWF Hunds
      MOVLW d'5'
      MOVWF Tens
      MOVLW d'6'
      MOVWF Ones
      GOTO ifDone
    
    ; Check if REG == 2
Test2
      MOVF Result_High, W  
      XORLW 0x02
      BTFSS STATUS, Z 
      GOTO Test3
      MOVLW d'5'
      MOVWF Hunds
      MOVLW d'1'
      MOVWF Tens
      MOVLW d'2'
      MOVWF Ones
      GOTO ifDone
    
    ; Check if REG == 3
Test3
      MOVF Result_High, W 
      XORLW 0x03       
      BTFSS STATUS, Z  
      GOTO ifDone
      MOVLW d'7'
      MOVWF Hunds
      MOVLW d'6'
      MOVWF Tens
      MOVLW d'8'
      MOVWF Ones
ifDone

      ;;MOVF Hunds, W
      ;;MOVWF PORTD
      
      ;MOVF NumberOne, W 
      ;ADDWF NumberTwo, W
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      MOVWF PORTC
      BSF PORTC, 7   

ENDLESSLOOP
      GOTO ENDLESSLOOP
;====================================================================
      END
